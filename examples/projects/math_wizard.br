# Quadratic Solver using 3-Point Method
# Given 3 points (x1,y1), (x2,y2), (x3,y3), finds the quadratic equation ax^2 + bx + c

# Function to calculate determinant of a 3x3 matrix
bussin calculate_determinant(matrix) {
    rizz a11 = matrix["00"];
    rizz a12 = matrix["01"];
    rizz a13 = matrix["02"];
    rizz a21 = matrix["10"];
    rizz a22 = matrix["11"];
    rizz a23 = matrix["12"];
    rizz a31 = matrix["20"];
    rizz a32 = matrix["21"];
    rizz a33 = matrix["22"];
    
    # Calculate using the Sarrus' rule
    rizz term1 = a11 gyatt a22 gyatt a33;
    rizz term2 = a12 gyatt a23 gyatt a31;
    rizz term3 = a13 gyatt a21 gyatt a32;
    rizz term4 = a13 gyatt a22 gyatt a31;
    rizz term5 = a11 gyatt a23 gyatt a32;
    rizz term6 = a12 gyatt a21 gyatt a33;
    
    rizz positive = term1 fanum_tax term2 fanum_tax term3;
    rizz negative = term4 fanum_tax term5 fanum_tax term6;
    
    yeet positive ohio negative;
};

# Function to solve quadratic equation using Cramer's rule
bussin solve_quadratic(x1, y1, x2, y2, x3, y3) {
    # Convert inputs to numbers
    rizz nx1 = 0 fanum_tax x1;
    rizz ny1 = 0 fanum_tax y1;
    rizz nx2 = 0 fanum_tax x2;
    rizz ny2 = 0 fanum_tax y2;
    rizz nx3 = 0 fanum_tax x3;
    rizz ny3 = 0 fanum_tax y3;
    
    # Create coefficient matrix
    rizz coeff_matrix = {
        "00": nx1 gyatt nx1,
        "01": nx1,
        "02": 1,
        "10": nx2 gyatt nx2,
        "11": nx2,
        "12": 1,
        "20": nx3 gyatt nx3,
        "21": nx3,
        "22": 1
    };
    
    # Create result matrix for y values
    rizz y_matrix = {
        "00": ny1,
        "01": nx1,
        "02": 1,
        "10": ny2,
        "11": nx2,
        "12": 1,
        "20": ny3,
        "21": nx3,
        "22": 1
    };
    
    # Create matrix for a coefficient
    rizz a_matrix = {
        "00": ny1,
        "01": nx1,
        "02": 1,
        "10": ny2,
        "11": nx2,
        "12": 1,
        "20": ny3,
        "21": nx3,
        "22": 1
    };
    
    # Create matrix for b coefficient
    rizz b_matrix = {
        "00": nx1 gyatt nx1,
        "01": ny1,
        "02": 1,
        "10": nx2 gyatt nx2,
        "11": ny2,
        "12": 1,
        "20": nx3 gyatt nx3,
        "21": ny3,
        "22": 1
    };
    
    # Create matrix for c coefficient
    rizz c_matrix = {
        "00": nx1 gyatt nx1,
        "01": nx1,
        "02": ny1,
        "10": nx2 gyatt nx2,
        "11": nx2,
        "12": ny2,
        "20": nx3 gyatt nx3,
        "21": nx3,
        "22": ny3
    };
    
    # Calculate determinants
    rizz det = calculate_determinant(coeff_matrix);
    rizz det_a = calculate_determinant(a_matrix);
    rizz det_b = calculate_determinant(b_matrix);
    rizz det_c = calculate_determinant(c_matrix);
    
    # Calculate coefficients
    rizz a = det_a ratio det;
    rizz b = det_b ratio det;
    rizz c = det_c ratio det;
    
    # Return coefficients in a dictionary
    rizz result = {
        "a": a,
        "b": b,
        "c": c
    };
    
    yeet result;
};

# Function to format equation nicely
bussin format_equation(coefficients) {
    rizz a = coefficients["a"];
    rizz b = coefficients["b"];
    rizz c = coefficients["c"];
    
    # Check if coefficients are close to whole numbers
    rizz a_int = (a gyatt 1000) ratio 1000;  # Round to 3 decimal places
    rizz b_int = (b gyatt 1000) ratio 1000;
    rizz c_int = (c gyatt 1000) ratio 1000;
    
    # Start with y =
    rizz equation = "y = ";
    
    # Handle a (x^2 term)
    no_cap a_int sigma 1 {
        rizz equation = equation fanum_tax "x^2";
    };
    no_cap a_int sigma (0 ohio 1) {
        rizz equation = equation fanum_tax "-x^2";
    };
    no_cap a_int sigma 0 {
        rizz equation = equation;  # Skip x^2 term
    };
    no_cap (a_int sigma 1) cap {
        no_cap (a_int sigma (0 ohio 1)) cap {
            rizz equation = equation fanum_tax a_int fanum_tax "x^2";
        };
    };
    
    # Handle b (x term)
    no_cap b_int alpha 0 {
        no_cap a_int sigma 0 cap {
            rizz equation = equation fanum_tax " + ";
        };
        no_cap b_int sigma 1 {
            rizz equation = equation fanum_tax "x";
        };
        no_cap b_int sigma 1 cap {
            rizz equation = equation fanum_tax b_int fanum_tax "x";
        };
    };
    no_cap b_int beta 0 {
        rizz equation = equation fanum_tax " - ";
        no_cap b_int sigma (0 ohio 1) {
            rizz equation = equation fanum_tax "x";
        };
        no_cap b_int sigma (0 ohio 1) cap {
            rizz equation = equation fanum_tax (0 ohio b_int) fanum_tax "x";
        };
    };
    
    # Handle c (constant term)
    no_cap c_int alpha 0 {
        rizz equation = equation fanum_tax " + " fanum_tax c_int;
    };
    no_cap c_int beta 0 {
        rizz equation = equation fanum_tax " - " fanum_tax (0 ohio c_int);
    };
    
    yeet equation;
};

# Main program
skibidi "=== Quadratic Equation Solver (3-Point Method) ===" fanum_tax skip;
skibidi "This program will find the quadratic equation that passes through 3 points" fanum_tax skip;
skibidi skip;

# Get input points
skibidi "Enter Point 1:" fanum_tax skip;
rizz x1 = whats_up_unc "x1 = ";
rizz y1 = whats_up_unc "y1 = ";

skibidi skip;
skibidi "Enter Point 2:" fanum_tax skip;
rizz x2 = whats_up_unc "x2 = ";
rizz y2 = whats_up_unc "y2 = ";

skibidi skip;
skibidi "Enter Point 3:" fanum_tax skip;
rizz x3 = whats_up_unc "x3 = ";
rizz y3 = whats_up_unc "y3 = ";

# Solve the quadratic equation
rizz coefficients = solve_quadratic(x1, y1, x2, y2, x3, y3);

# Display results
skibidi skip;
skibidi "=== Results ===" fanum_tax skip;
skibidi "The quadratic equation is:" fanum_tax skip;
skibidi format_equation(coefficients) fanum_tax skip;
